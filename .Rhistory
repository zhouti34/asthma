t <-  table1::table1(as.formula(t1),data=data)
t2 <- summary(data[,x])
t3 <- summary(data[,y])
t4 <- summary(data[,cov])
all_summary <- list(t,t2,t3,t4)
names(all_summary) <- c("TABLE1","X_SUMMARY","Y_SUMMARY","COV_SUMMARY")
return(all_summary)
}
data("test")
y <- c("ASTHMA")
x <- c("AGE")
cov <- c("PA","BMI")
data <- test
summaryData(x,y,cov,data)
#' summaryData
#'
#' This function is used to describe
#' the basic situation of the variables in
#' the data set, such as the maximum and minimum values,
#' the 25th quartile and the 75th quartile.
#' A summary list is also returned in the result,
#' and this table shows the detailed distribution of the
#' variables entered. Variables need to be specified as
#' independent, dependent and covariate variables
#' The data set contains the prevalence of asthma and some
#' basic information about the population such as
#' BMI, activity level (PA), age, gender, race, alcohol use (ALQ), and smoking status (COT).
#'
#' @name  summaryData
#'
#' @param ind Independent variable
#' @param dep Dependentvariable
#' @param cov Covariates
#' @param data Dataset you want to describe,must be a dataframe
#'
#' @return  A table in Viewwe windows,and summary statistics of variables
#'
#' @export
#'
#' @examples data("test")
#' ind <- c("ASTHMA")
#' dep <- c("AGE")
#' cov <- c("PA","BMI")
#' data <- test
#' summaryData(ind,dep,cov,data)
summaryData <- function(ind,dep,cov,data){
dep <- paste0(y,collapse = "+")
ind <- paste0(x,collapse = "+")
COV <- paste0(cov,collapse = "+")
t1 <- paste0("~",dep,"+",ind,"+",COV)
t <-  table1::table1(as.formula(t1),data=data)
t2 <- summary(data[,ind])
t3 <- summary(data[,dep])
t4 <- summary(data[,cov])
all_summary <- list(t,t2,t3,t4)
names(all_summary) <- c("TABLE1","X_SUMMARY","Y_SUMMARY","COV_SUMMARY")
return(all_summary)
}
data("test")
y <- c("ASTHMA")
x <- c("AGE")
cov <- c("PA","BMI")
data <- test
summaryData(x,y,cov,data)
#' summaryData
#'
#' This function is used to describe
#' the basic situation of the variables in
#' the data set, such as the maximum and minimum values,
#' the 25th quartile and the 75th quartile.
#' A summary list is also returned in the result,
#' and this table shows the detailed distribution of the
#' variables entered. Variables need to be specified as
#' independent, dependent and covariate variables
#' The data set contains the prevalence of asthma and some
#' basic information about the population such as
#' BMI, activity level (PA), age, gender, race, alcohol use (ALQ), and smoking status (COT).
#'
#' @name  summaryData
#'
#' @param ind Independent variable
#' @param dep Dependentvariable
#' @param cov Covariates
#' @param data Dataset you want to describe,must be a dataframe
#'
#' @return  A table in Viewwe windows,and summary statistics of variables
#'
#' @export
#'
#' @examples data("test")
#' dep <- c("ASTHMA")
#' ind <- c("AGE")
#' cov <- c("PA","BMI")
#' data <- test
#' summaryData(ind,dep,cov,data)
summaryData <- function(ind,dep,cov,data){
Y <- paste0(dep,collapse = "+")
X <- paste0(ind,collapse = "+")
COV <- paste0(cov,collapse = "+")
t1 <- paste0("~",Y,"+",X,"+",COV)
t <-  table1::table1(as.formula(t1),data=data)
t2 <- summary(data[,ind])
t3 <- summary(data[,dep])
t4 <- summary(data[,cov])
all_summary <- list(t,t2,t3,t4)
names(all_summary) <- c("TABLE1","X_SUMMARY","Y_SUMMARY","COV_SUMMARY")
return(all_summary)
}
y <- c("ASTHMA")
x <- c("AGE")
data <- test
his_plot(x,"title","xlab","ylab",data)
?hist
his_plot <- function(x,title,xlab,ylab,data){
p1<-
ggplot(data = data,aes(x=get(x)))+
geom_histogram(aes(y=..density..),bins = 60,fill="blue",alpha=0.6,colour="black")+
geom_density(size=1)+
ggtitle(paste("The histogram plot of variable",x) )+
xlab(xlab)+
ylab(frequency)
p1
}
y <- c("ASTHMA")
x <- c("AGE")
data <- test
his_plot(x,"title","xlab","ylab",data)
#' Histogram_plot
#'
#' This function serves to draw a histogram of the variables
#' A histogram is an exact graphical representation of the distribution of numerical data.
#' It is an estimate of the probability distribution of a continuous variable (quantitative variable) that
#' The first step is to segment the range of values
#' These values are usually specified as continuous, non-overlapping intervals of the variable.
#' The intervals must be adjacent and usually (but not necessarily) of equal size
#' @import ggplot2
#'
#' @param x Character vector specifying the variable from the dataset to be plot. Example "AGE"
#' @param title the title of the histograms
#' @param xlab  the choosen variable x from the dataset
#' @param ylab  frequency of occurance
#' @param data to be computed
#'
#' @return A histogram plot of
#'
#' @export
#'
#' @examples data("test")
#' y <- c("ASTHMA")
#' x <- c("AGE")
#' data <- test
#' his_plot(x,"The histogram plot",xlab,ylab,data)
#' @references H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016.
his_plot <- function(x,title,xlab,ylab,data){
p1<-
ggplot(data = data,aes(x=get(x)))+
geom_histogram(aes(y=..density..),bins = 60,fill="blue",alpha=0.6,colour="black")+
geom_density(size=1)+
ggtitle(title)+
xlab(xlab)+
ylab(ylab)
p1
}
y <- c("ASTHMA")
x <- c("AGE")
data <- test
his_plot(x,"The histogram plot",xlab,ylab,data)
#' Histogram_plot
#'
#' This function serves to draw a histogram of the variables
#' A histogram is an exact graphical representation of the distribution of numerical data.
#' It is an estimate of the probability distribution of a continuous variable (quantitative variable) that
#' The first step is to segment the range of values
#' These values are usually specified as continuous, non-overlapping intervals of the variable.
#' The intervals must be adjacent and usually (but not necessarily) of equal size
#' @import ggplot2
#'
#' @param x Character vector specifying the variable from the dataset to be plot. Example "AGE"
#' @param title the title of the histograms
#' @param xlab  the choosen variable x from the dataset
#' @param ylab  frequency of occurance
#' @param data to be computed
#'
#' @return A histogram plot of
#'
#' @export
#'
#' @examples data("test")
#' y <- c("ASTHMA")
#' x <- c("AGE")
#' data <- test
#' his_plot(x,"The histogram plot","xlab","ylab",data)
#' @references H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016.
his_plot <- function(x,title,xlab,ylab,data){
p1<-
ggplot(data = data,aes(x=get(x)))+
geom_histogram(aes(y=..density..),bins = 60,fill="blue",alpha=0.6,colour="black")+
geom_density(size=1)+
ggtitle(title)+
xlab(xlab)+
ylab(ylab)
p1
}
y <- c("ASTHMA")
x <- c("AGE")
data <- test
his_plot(x,"The histogram plot","xlab","ylab",data)
his_plot(x,"The histogram plot","xlab","ylab",data)
p1<-
ggplot(data = data,aes(x=get(x)))+
geom_histogram(aes(y=..density..),bins = 60,fill="blue",alpha=0.6,colour="black")+
geom_density(size=1)+
ggtitle(title)+
xlab(x)+
ylab(ylab)
his_plot(x,"The histogram plot","xlab","ylab",data)
#' Histogram_plot
#'
#' This function serves to draw a histogram of the variables
#' A histogram is an exact graphical representation of the distribution of numerical data.
#' It is an estimate of the probability distribution of a continuous variable (quantitative variable) that
#' The first step is to segment the range of values
#' These values are usually specified as continuous, non-overlapping intervals of the variable.
#' The intervals must be adjacent and usually (but not necessarily) of equal size
#' @import ggplot2
#'
#' @param x Character vector specifying the variable from the dataset to be plot. Example "AGE"
#' @param title the title of the histograms
#' @param xlab  the choosen variable x from the dataset
#' @param ylab  frequency of occurance
#' @param data to be computed
#'
#' @return A histogram plot of
#'
#' @export
#'
#' @examples data("test")
#' y <- c("ASTHMA")
#' x <- c("AGE")
#' data <- test
#' his_plot(x,"The histogram plot","xlab","ylab",data)
#' @references H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016.
his_plot <- function(x,title,xlab,ylab,data){
p1<-
ggplot(data = data,aes(x=get(x)))+
geom_histogram(aes(y=..density..),bins = 60,fill="blue",alpha=0.6,colour="black")+
geom_density(size=1)+
ggtitle(title)+
xlab(xlab)+
ylab("frequency")
p1
}
his_plot(x,"The histogram plot","xlab","ylab",data)
his_plot <- function(x,title,xlab,ylab,data){
p1<-
ggplot(data = data,aes(x=get(x)))+
geom_histogram(aes(y=..density..),bins = 60,fill="blue",alpha=0.6,colour="black")+
geom_density(size=1)+
ggtitle(title)+
xlab(paste("the number of x",x))+
ylab("frequency")
p1
}
his_plot(x,"The histogram plot","xlab","ylab",data)
his_plot <- function(x,title,xlab,ylab,data){
p1<-
ggplot(data = data,aes(x=get(x)))+
geom_histogram(aes(y=..density..),bins = 60,fill="blue",alpha=0.6,colour="black")+
geom_density(size=1)+
ggtitle(title)+
xlab(paste("the number of",x))+
ylab("frequency")
p1
}
his_plot <- function(x,title,xlab,ylab,data){
p1<-
ggplot(data = data,aes(x=get(x)))+
geom_histogram(aes(y=..density..),bins = 60,fill="blue",alpha=0.6,colour="black")+
geom_density(size=1)+
ggtitle(title)+
xlab(paste(x))+
ylab("frequency")
p1
}
his_plot <- function(x,title,xlab,ylab,data){
p1<-
ggplot(data = data,aes(x=get(x)))+
geom_histogram(aes(y=..density..),bins = 60,fill="blue",alpha=0.6,colour="black")+
geom_density(size=1)+
ggtitle(title)+
xlab(paste(x))+
ylab("frequency")
p1
}
his_plot(x,"The histogram plot","xlab","ylab",data)
his_plot <- function(x,title,data){
p1<-
ggplot(data = data,aes(x=get(x)))+
geom_histogram(aes(y=..density..),bins = 60,fill="blue",alpha=0.6,colour="black")+
geom_density(size=1)+
ggtitle(title)+
xlab(paste(x))+
ylab("frequency")
p1
}
his_plot(x,"The histogram plot","xlab","ylab",data)
his_plot(x,"The histogram plot",data)
?predict
y <- c("ASTHMA")
#' x <- c("AGE")
#' cov <- c("PA","BMI")
#' family <- "binomial"
#' data <- test
#' glm_process(x,y,cov,family,data)
y <- c("ASTHMA")
x <- c("AGE")
cov <- c("PA","BMI")
family <- "binomial"
data <- test
glm_process(x,y,cov,family,data)
?glm
library(TestingPackage)
browseVignettes("TestingPackage")
library(MPLNClust)
browseVignettes("MPLNClust")
browseVignettes(asthma)
browseVignettes("asthma")
library(asthma)
library(asthma)
browseVignettes("asthma")
GLM_plot <- function(x,y,cov,family,data){
Y <- paste0(y,collapse = "+")
X <- paste0(x,collapse = "+")
COV <- paste0(cov,collapse = "+")
t <- paste0(Y,"~",X,"+",COV)
t1 <- glm(t,family = family,data = data)
t2 <- as.data.frame(summary(t1)$coefficients)
data[,c("fv","L","U")] <- predict(t1,data,interval = "confidence")
p <-  ggplot(data, mapping = aes(get(x), fv)) + geom_point() +
geom_smooth(method="lm", se=T )+
xlab(x)
t3 <- list(as.data.frame(summary(t1)$coefficients),p)
names(t3) <- c("result","plot")
print(t3[[2]])
return(t3)
y <- c("ASTHMA")
x <- c("AGE")
cov <- c("PA","BMI")
family <- "binomial"
data <- test
GLM_plot(x,y,cov,family,data)
data <- test
GLM_plot(x,y,cov,family,data)
GLM_plot <- function(x,y,cov,family,data){
Y <- paste0(y,collapse = "+")
X <- paste0(x,collapse = "+")
COV <- paste0(cov,collapse = "+")
t <- paste0(Y,"~",X,"+",COV)
t1 <- glm(t,family = family,data = data)
t2 <- as.data.frame(summary(t1)$coefficients)
data[,c("fv","L","U")] <- predict(t1,data,interval = "confidence")
p <-  ggplot(data, mapping = aes(get(x), fv)) + geom_point() +
geom_smooth(method="lm", se=T )+
xlab(x)
t3 <- list(as.data.frame(summary(t1)$coefficients),p)
names(t3) <- c("result","plot")
print(t3[[2]])
return(t3)
#'GLM_plot
#'
#' GLM is standed for generalized linear model, which is used to fit the linear relationship between variables.
#' The generalize linear model is an extension of the linear model that meet the
#' mathematical expectations of the response variables and the predictor variables of the linear combination are established by a linkage function
#' The relationship between the mathematical expectation of the response variable and the linear combination of the predictor variables.
#' It is an extension of the linear model in studying the non-normal
#' distribution of response values and the concise and direct linear transformation of nonlinear models.
#' @import purrr stats
#'
#' @param x Independent variable
#' @param y Dependentvariable
#' @param cov Covariates
#' @param family Binomial or gaussian
#' @param data Data to be computed
#'
#' @return A result dataframe and regression curves with points of x,use plot() to draw plots
#'
#' @export
#'
#' @examples data("test")
#' y <- c("ASTHMA")
#' x <- c("AGE")
#' cov <- c("PA","BMI")
#' family <- "binomial"
#' data <- test
#' GLM_plot(x,y,cov,family,data)
#'
#' @references R Core Team (2022). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL <https://www.R-project.org/>.
#' @references Henry L, Wickham H (2020). purrr: Functional Programming Tools. R package version 0.3.4, <https://CRAN.R-project.org/package=purrr>.
#'
GLM_plot <- function(x,y,cov,family,data){
Y <- paste0(y,collapse = "+")
X <- paste0(x,collapse = "+")
COV <- paste0(cov,collapse = "+")
t <- paste0(Y,"~",X,"+",COV)
t1 <- glm(t,family = family,data = data)
t2 <- as.data.frame(summary(t1)$coefficients)
data[,c("fv","L","U")] <- predict(t1,data,interval = "confidence")
p <-  ggplot(data, mapping = aes(get(x), fv)) + geom_point() +
geom_smooth(method="lm", se=T )+
xlab(x)
t3 <- list(as.data.frame(summary(t1)$coefficients),p)
names(t3) <- c("result","plot")
print(t3[[2]])
return(t3)
GLM_plot <- function(x,y,cov,family,data){
Y <- paste0(y,collapse = "+")
X <- paste0(x,collapse = "+")
COV <- paste0(cov,collapse = "+")
t <- paste0(Y,"~",X,"+",COV)
t1 <- glm(t,family = family,data = data)
t2 <- as.data.frame(summary(t1)$coefficients)
data[,c("fv","L","U")] <- predict(t1,data,interval = "confidence")
p <-  ggplot(data, mapping = aes(get(x), fv)) + geom_point() +
geom_smooth(method="lm", se=T )+
xlab(x)
t3 <- list(as.data.frame(summary(t1)$coefficients),p)
names(t3) <- c("result","plot")
print(t3[[2]])
return(t3)
}
GLM_plot <- function(x,y,cov,family,data){
Y <- paste0(y,collapse = "+")
X <- paste0(x,collapse = "+")
COV <- paste0(cov,collapse = "+")
t <- paste0(Y,"~",X,"+",COV)
t1 <- glm(t,family = family,data = data)
t2 <- as.data.frame(summary(t1)$coefficients)
data[,c("fv","L","U")] <- predict(t1,data,interval = "confidence")
p <-  ggplot(data, mapping = aes(get(x), fv)) + geom_point() +
geom_smooth(method="lm", se=T )+
xlab(x)
t3 <- list(as.data.frame(summary(t1)$coefficients),p)
names(t3) <- c("result","plot")
print(t3[[2]])
return(t3)
}
GLM_plot(x,y,cov,family,data)
?ggplot
GLM_plot <- function(x,y,cov,family,data){
Y <- paste0(y,collapse = "+")
X <- paste0(x,collapse = "+")
COV <- paste0(cov,collapse = "+")
t <- paste0(Y,"~",X,"+",COV)
t1 <- glm(t,family = family,data = data)
t2 <- as.data.frame(summary(t1)$coefficients)
data[,c("fv","L","U")] <- predict(t1,data,interval = "confidence")
p <-  ggplot(data, mapping = aes(get(x), fv)) + geom_point() +
geom_smooth(method="lm", se=T )+
xlab(x)
t3 <- list(as.data.frame(summary(t1)$coefficients),p)
names(t3) <- c("result","plot")
print(t3[[2]] + ggtitle("Generalized Linear Model Plot"))
return(t3)
}
GLM_plot(x,y,cov,family,data)
GLM_plot <- function(x,y,cov,family,data){
Y <- paste0(y,collapse = "+")
X <- paste0(x,collapse = "+")
COV <- paste0(cov,collapse = "+")
t <- paste0(Y,"~",X,"+",COV)
t1 <- glm(t,family = family,data = data)
t2 <- as.data.frame(summary(t1)$coefficients)
data[,c("fv","L","U")] <- predict(t1,data,interval = "confidence")
p <-  ggplot(data, mapping = aes(get(x), fv)) + geom_point() +
geom_smooth(method="lm", se=T )+
xlab(x)
t3 <- list(as.data.frame(summary(t1)$coefficients),p)
names(t3) <- c("result","plot")
print(t3[[2]] + ggtitle("Generalized Linear Model Plot"))
return(t3)
}
y <- c("ASTHMA")
x <- c("AGE")
cov <- c("PA","BMI")
family <- "binomial"
data <- test
GLM_plot(x,y,cov,family,data)
t3
his_plot(x,"The histogram plot",data)
library(testthat)
library(asthma)
test_check("asthma")
load("C:/Users/Melody/Desktop/BCB410/asthma/data/test.rda")
View(test)
load("C:/Users/Melody/Desktop/BCB410/asthma/R/sysdata.rda")
MPLNClust::runMPLNClust()
MPLNClust::runMPLNClust()
require("devtools")
devtools::install_github("karynkomatsu/orthoVisualizer", build_vignettes = TRUE)
library(asthma)
browseVignettes(asthma)
browseVignettes("asthma")
MPLNClust::runMPLNClust()
describe(x,y,cov,data = test.rda)
describe(x,y,cov,data = test)
data_pre(ln_name,fc_name,data)
his_plot(x,"title","xlab","ylab",data)
cor_plot(cor_name,data)
glm_process(x,y,cov,family,data)
usethis::use_citation()
devtools::install_github("https://github.com/zhouti34/asthma/tree/master", build_vignettes = TRUE)
library(asthma)
